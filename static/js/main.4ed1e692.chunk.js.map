{"version":3,"sources":["components/util/UsersApi.js","components/util/PostsApi.js","components/util/CommentsApi.js","components/util/PostsData.js","components/user/User.js","components/comment/Comment.js","components/comments-list/CommentsList.js","components/post/Post.js","components/post-list/PostList.js","components/search-field/SearchField.js","App.js","index.js"],"names":["UsersApi","fetch","then","response","json","PostsApi","CommentsApi","_callee","_ref","_ref2","posts","users","comments","postsData","regenerator_default","a","wrap","_context","prev","next","Promise","all","sent","Object","slicedToArray","map","post","objectSpread","user","find","id","userId","toConsumableArray","filter","comment","postId","abrupt","stop","User","name","email","address","street","suite","zipcode","city","geo","react_default","createElement","lat","lng","Comment","body","className","CommentsList","item","key","Post","title","PostList","SearchField","searchFieldType","searchFieldValue","updateSearchFieldsValue","type","value","onChange","autoComplete","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadData","setState","isLoaded","_asyncRequest","_getPostsData","apply","arguments","getPostsData","externalData","showFilteredPosts","fieldType","state","trim","toLowerCase","includes","e","length","undefined","target","newFieldValue","keys","forEach","postsToRender","_this$state","_this$state$searchFie","postsToShow","onClick","disabled","React","Component","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.4ed1e692.chunk.js","sourcesContent":["export const UsersApi = () => {\n    return fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json());\n};\n","export const PostsApi = () => {\n    return fetch('https://jsonplaceholder.typicode.com/posts')\n        .then(response => response.json());\n};\n","export const CommentsApi = () => {\n    return fetch('https://jsonplaceholder.typicode.com/comments')\n        .then(response => response.json());\n};\n","import {UsersApi} from './UsersApi';\nimport {PostsApi} from './PostsApi';\nimport {CommentsApi} from './CommentsApi';\n\nexport async function getPostsData() {\n    const [posts, users, comments] = await Promise.all([\n        PostsApi(),\n        UsersApi(),\n        CommentsApi()\n    ]);\n    const postsData = posts.map(post => ({\n        ...post,\n        user: users.find(user => user.id === post.userId),\n        comments: [...comments.filter(comment => comment.postId === post.id)]\n    }));\n    return postsData;\n};\n","import React from 'react';\n\nexport default function User({user}) {\n    const {name, email, address} = user;\n    const {street, suite, zipcode, city, geo} = address;\n    return (\n        <div>\n            <h4>Author:</h4>\n            <ul>\n                <li>{name}</li>\n                <li>{email}</li>\n                <li>\n                    {street} str.,\n                    {suite},\n                    Zip: {zipcode},\n                    {city}<br/>\n                    Geoposition:\n                    lat:{geo.lat},\n                    lng:{geo.lng}\n                </li>\n            </ul>\n        </div>\n    )\n}","import React from 'react';\n\nexport default function Comment({comment}) {\n    const {name, email, body} = comment;\n    return (\n        <div className='comment'>\n            <p className='title'>{name}</p>\n            <p>{email}</p>\n            <p>{body}</p>\n        </div>\n    )\n}","import React from 'react';\nimport Comment from \"../comment/Comment\";\n\nexport default function CommentsList({comments}) {\n    return (\n        <div>\n            <h4>Comments: </h4>\n            <ul>\n                {\n                    comments.map((item) => {\n                        return (\n                            <li key={item.id}>\n                                <Comment\n                                    comment={item}\n                                />\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </div>\n    )\n}","import React from 'react';\nimport User from '../user/User';\nimport CommentsList from '../comments-list/CommentsList'\n\nexport default function Post({post}) {\n    const {title, body, userId, user, comments} = post;\n    return (\n        <div className='post'>\n            <h3 className='title'>{title}</h3>\n            <p>{body}</p>\n            <User\n                key={userId}\n                user={user}\n            />\n            <CommentsList\n                comments={comments}\n            />\n        </div>\n    )\n};","import React from 'react';\nimport Post from '../post/Post';\n\nexport default function PostList({posts}) {\n    return (\n        <div>\n            <ul>\n                {\n                    posts.map((item) => {\n                        return (\n                            <li key={item.id}>\n                                <Post\n                                    post={item}\n                                />\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </div>\n    )\n};","import React from 'react';\n\nexport default function SearchField({searchFieldType, searchFieldValue, updateSearchFieldsValue}) {\n    return (\n        <label\n            className='label'>\n            Filter by {searchFieldType}\n            <input\n                className='input'\n                type='search'\n                name={searchFieldType}\n                value={searchFieldValue}\n                onChange={updateSearchFieldsValue}\n                autoComplete='off'\n            />\n        </label>\n    )\n};\n\n","import React from 'react';\nimport {getPostsData} from './components/util/PostsData';\nimport PostList from './components/post-list/PostList';\nimport SearchField from \"./components/search-field/SearchField\";\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            searchFieldType: 'title',\n            searchFieldValue: {\n                title: '',\n                body: '',\n                user: '',\n                all: ''\n            },\n        }\n    }\n\n    loadData = () => {\n        this.setState({\n            isLoaded: true,\n        });\n        this._asyncRequest = getPostsData().then(\n            externalData => {\n                this._asyncRequest = null;\n                this.setState({\n                    postsData: externalData\n                });\n            }\n        );\n    };\n    showFilteredPosts = () => {\n        const fieldType = this.state.searchFieldType;\n        const searchFieldValue = this.state.searchFieldValue[fieldType].trim().toLowerCase();\n        if (!searchFieldValue.trim()) {\n            return;\n        }\n        return this.state.postsData.filter(post => {\n            if (fieldType === 'all') {\n                return post.title.trim().toLowerCase().includes(searchFieldValue) ||\n                    post.body.trim().toLowerCase().includes(searchFieldValue) ||\n                    post.user.name.trim().toLowerCase().includes(searchFieldValue)\n            } else if (fieldType === 'user') {\n                return post.user.name.trim().toLowerCase().includes(searchFieldValue)\n            } else {\n                return post[fieldType].trim().toLowerCase().includes(searchFieldValue)\n            }\n        });\n    };\n    updateSearchFieldsValue = (e, {name, value} = e.target) => {\n        const newFieldValue = this.state.searchFieldValue;\n        Object.keys(newFieldValue).forEach((item) => {\n            newFieldValue[item] = item === name ? value : '';\n        });\n        this.setState({\n                searchFieldType: name,\n                searchFieldValue: newFieldValue,\n                postsToRender: this.showFilteredPosts() || this.state.postsData\n            }\n        );\n    };\n\n    render() {\n        const {postsData, postsToRender, isLoaded, searchFieldValue: {title, body, user, all}} = this.state;\n        let postsToShow = postsToRender || postsData;\n        return (\n            <div>\n                <h1\n                    className='main-title'>\n                    React dynamic list of posts\n                </h1>\n                {postsData ? (\n                    <div>\n                        <span className='subtitle'>\n                            Amout of shown posts is {postsToShow.length}\n                        </span>\n                        <div\n                            className='input-wrapper'>\n                            <SearchField\n                                searchFieldType='all'\n                                searchFieldValue={all}\n                                updateSearchFieldsValue={this.updateSearchFieldsValue}\n                            />\n                            <SearchField\n                                searchFieldType='title'\n                                searchFieldValue={title}\n                                updateSearchFieldsValue={this.updateSearchFieldsValue}\n                            />\n                            <SearchField\n                                searchFieldType='body'\n                                searchFieldValue={body}\n                                updateSearchFieldsValue={this.updateSearchFieldsValue}\n                            />\n                            <SearchField\n                                searchFieldType='user'\n                                searchFieldValue={user}\n                                updateSearchFieldsValue={this.updateSearchFieldsValue}\n                            />\n                        </div>\n                        <PostList\n                            posts={postsToShow}/>\n                    </div>\n                ) : (\n                    <button\n                        className='button'\n                        onClick={this.loadData}\n                        disabled={isLoaded}>\n                        {isLoaded ? 'Loading' : 'Details'}\n                    </button>\n                )}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.css';\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}